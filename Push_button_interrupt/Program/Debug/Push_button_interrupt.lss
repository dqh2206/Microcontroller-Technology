
Push_button_interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000148  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000001bc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000078f  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006f2  00000000  00000000  000009eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002f9  00000000  00000000  000010dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  000013d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003f2  00000000  00000000  0000142c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001d3  00000000  00000000  0000181e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  000019f1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__vector_3>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	6c 00       	.word	0x006c	; ????
  6a:	5b 00       	.word	0x005b	; ????
  6c:	6e 00       	.word	0x006e	; ????
  6e:	5d 00       	.word	0x005d	; ????
  70:	5f 00       	.word	0x005f	; ????
  72:	61 00       	.word	0x0061	; ????
  74:	63 00       	.word	0x0063	; ????
  76:	65 00       	.word	0x0065	; ????
  78:	67 00       	.word	0x0067	; ????
  7a:	69 00       	.word	0x0069	; ????

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_clear_bss>:
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	a1 30       	cpi	r26, 0x01	; 1
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 87 00 	call	0x10e	; 0x10e <main>
  9c:	0c 94 a2 00 	jmp	0x144	; 0x144 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <LED_Display>:
 */ 
uint8_t LED_Display (uint8_t i)
{
	uint8_t LED[] = {0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F}; // 7-segment LED decoder
	// For example, number 0 corresponds to segment A = 1, B = 1, C = 1, D = 1, E = 1, F = 1, G = 0, Dot = 0. 
	switch(i)
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	8a 30       	cpi	r24, 0x0A	; 10
  a8:	91 05       	cpc	r25, r1
  aa:	a8 f4       	brcc	.+42     	; 0xd6 <LED_Display+0x32>
  ac:	fc 01       	movw	r30, r24
  ae:	ec 5c       	subi	r30, 0xCC	; 204
  b0:	ff 4f       	sbci	r31, 0xFF	; 255
  b2:	0c 94 9c 00 	jmp	0x138	; 0x138 <__tablejump2__>
	{
		case 0 : {return LED[0]; break;}
		case 1 : {return LED[1]; break;}
  b6:	86 e0       	ldi	r24, 0x06	; 6
  b8:	08 95       	ret
		case 2 : {return LED[2]; break;}
		case 3 : {return LED[3]; break;}
  ba:	8f e4       	ldi	r24, 0x4F	; 79
  bc:	08 95       	ret
		case 4 : {return LED[4]; break;}
  be:	86 e6       	ldi	r24, 0x66	; 102
  c0:	08 95       	ret
		case 5 : {return LED[5]; break;}
  c2:	8d e6       	ldi	r24, 0x6D	; 109
  c4:	08 95       	ret
		case 6 : {return LED[6]; break;}
  c6:	8d e7       	ldi	r24, 0x7D	; 125
  c8:	08 95       	ret
		case 7 : {return LED[7]; break;}
  ca:	87 e0       	ldi	r24, 0x07	; 7
  cc:	08 95       	ret
		case 8 : {return LED[8]; break;}
  ce:	8f e7       	ldi	r24, 0x7F	; 127
  d0:	08 95       	ret
		case 9 : {return LED[9]; break;}
  d2:	8f e6       	ldi	r24, 0x6F	; 111
  d4:	08 95       	ret
		default: break;
	}
}
  d6:	08 95       	ret
{
	uint8_t LED[] = {0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F}; // 7-segment LED decoder
	// For example, number 0 corresponds to segment A = 1, B = 1, C = 1, D = 1, E = 1, F = 1, G = 0, Dot = 0. 
	switch(i)
	{
		case 0 : {return LED[0]; break;}
  d8:	8f e3       	ldi	r24, 0x3F	; 63
  da:	08 95       	ret
		case 1 : {return LED[1]; break;}
		case 2 : {return LED[2]; break;}
  dc:	8b e5       	ldi	r24, 0x5B	; 91
		case 7 : {return LED[7]; break;}
		case 8 : {return LED[8]; break;}
		case 9 : {return LED[9]; break;}
		default: break;
	}
}
  de:	08 95       	ret

000000e0 <__vector_3>:

ISR(PCINT0_vect) // PINB0 interrupt program
{
  e0:	1f 92       	push	r1
  e2:	0f 92       	push	r0
  e4:	0f b6       	in	r0, 0x3f	; 63
  e6:	0f 92       	push	r0
  e8:	11 24       	eor	r1, r1
  ea:	8f 93       	push	r24
	count++;
  ec:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  f0:	8f 5f       	subi	r24, 0xFF	; 255
  f2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	if(count==10) count =0;
  f6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  fa:	8a 30       	cpi	r24, 0x0A	; 10
  fc:	11 f4       	brne	.+4      	; 0x102 <__vector_3+0x22>
  fe:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
}
 102:	8f 91       	pop	r24
 104:	0f 90       	pop	r0
 106:	0f be       	out	0x3f, r0	; 63
 108:	0f 90       	pop	r0
 10a:	1f 90       	pop	r1
 10c:	18 95       	reti

0000010e <main>:

int main(void)
{
    /* Replace with your application code */
	DDRB &= 0xFE; // PortB0 as input
 10e:	20 98       	cbi	0x04, 0	; 4
	DDRD = 0xFF; // Port D as output
 110:	8f ef       	ldi	r24, 0xFF	; 255
 112:	8a b9       	out	0x0a, r24	; 10
	PCICR = 0x01; // select interrupt group PCINT0-7
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
	PCMSK0 = 0x01; // activate PINB0 interrupt
 11a:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__DATA_REGION_ORIGIN__+0xb>
	sei(); // activate global interrupt
 11e:	78 94       	sei
	/* Replace with your application code */
	while (1)
	{
		PORTD = LED_Display(count);
 120:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 124:	0e 94 52 00 	call	0xa4	; 0xa4 <LED_Display>
 128:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12a:	87 ea       	ldi	r24, 0xA7	; 167
 12c:	91 e6       	ldi	r25, 0x61	; 97
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <main+0x20>
 132:	00 c0       	rjmp	.+0      	; 0x134 <main+0x26>
 134:	00 00       	nop
 136:	f4 cf       	rjmp	.-24     	; 0x120 <main+0x12>

00000138 <__tablejump2__>:
 138:	ee 0f       	add	r30, r30
 13a:	ff 1f       	adc	r31, r31
 13c:	05 90       	lpm	r0, Z+
 13e:	f4 91       	lpm	r31, Z
 140:	e0 2d       	mov	r30, r0
 142:	09 94       	ijmp

00000144 <_exit>:
 144:	f8 94       	cli

00000146 <__stop_program>:
 146:	ff cf       	rjmp	.-2      	; 0x146 <__stop_program>
