
Push_button_polling.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000015e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000010a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000015e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000190  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000774  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006db  00000000  00000000  0000096c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002cf  00000000  00000000  00001047  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001318  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e1  00000000  00000000  0000134c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001b6  00000000  00000000  0000172d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000018e3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   8:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  10:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  14:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  18:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  20:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  28:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  30:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  3c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  44:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  4c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  50:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  54:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  58:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  5c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  60:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  64:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  68:	64 00       	.word	0x0064	; ????
  6a:	53 00       	.word	0x0053	; ????
  6c:	66 00       	.word	0x0066	; ????
  6e:	55 00       	.word	0x0055	; ????
  70:	57 00       	.word	0x0057	; ????
  72:	59 00       	.word	0x0059	; ????
  74:	5b 00       	.word	0x005b	; ????
  76:	5d 00       	.word	0x005d	; ????
  78:	5f 00       	.word	0x005f	; ????
  7a:	61 00       	.word	0x0061	; ????

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61
  88:	0e 94 68 00 	call	0xd0	; 0xd0 <main>
  8c:	0c 94 83 00 	jmp	0x106	; 0x106 <_exit>

00000090 <__bad_interrupt>:
  90:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000094 <LED_Display>:
 */ 
uint8_t LED_Display (uint8_t i)
{
	uint8_t LED[] = {0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F}; // 7-segment LED decoder
	// For example, number 0 corresponds to segment A = 1, B = 1, C = 1, D = 1, E = 1, F = 1, G = 0, Dot = 0. 
	switch(i)
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	8a 30       	cpi	r24, 0x0A	; 10
  98:	91 05       	cpc	r25, r1
  9a:	a8 f4       	brcc	.+42     	; 0xc6 <LED_Display+0x32>
  9c:	fc 01       	movw	r30, r24
  9e:	ec 5c       	subi	r30, 0xCC	; 204
  a0:	ff 4f       	sbci	r31, 0xFF	; 255
  a2:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__tablejump2__>
	{
		case 0 : {return LED[0]; break;}
		case 1 : {return LED[1]; break;}
  a6:	86 e0       	ldi	r24, 0x06	; 6
  a8:	08 95       	ret
		case 2 : {return LED[2]; break;}
		case 3 : {return LED[3]; break;}
  aa:	8f e4       	ldi	r24, 0x4F	; 79
  ac:	08 95       	ret
		case 4 : {return LED[4]; break;}
  ae:	86 e6       	ldi	r24, 0x66	; 102
  b0:	08 95       	ret
		case 5 : {return LED[5]; break;}
  b2:	8d e6       	ldi	r24, 0x6D	; 109
  b4:	08 95       	ret
		case 6 : {return LED[6]; break;}
  b6:	8d e7       	ldi	r24, 0x7D	; 125
  b8:	08 95       	ret
		case 7 : {return LED[7]; break;}
  ba:	87 e0       	ldi	r24, 0x07	; 7
  bc:	08 95       	ret
		case 8 : {return LED[8]; break;}
  be:	8f e7       	ldi	r24, 0x7F	; 127
  c0:	08 95       	ret
		case 9 : {return LED[9]; break;}
  c2:	8f e6       	ldi	r24, 0x6F	; 111
  c4:	08 95       	ret
		default: break;
	}
}
  c6:	08 95       	ret
{
	uint8_t LED[] = {0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F}; // 7-segment LED decoder
	// For example, number 0 corresponds to segment A = 1, B = 1, C = 1, D = 1, E = 1, F = 1, G = 0, Dot = 0. 
	switch(i)
	{
		case 0 : {return LED[0]; break;}
  c8:	8f e3       	ldi	r24, 0x3F	; 63
  ca:	08 95       	ret
		case 1 : {return LED[1]; break;}
		case 2 : {return LED[2]; break;}
  cc:	8b e5       	ldi	r24, 0x5B	; 91
		case 7 : {return LED[7]; break;}
		case 8 : {return LED[8]; break;}
		case 9 : {return LED[9]; break;}
		default: break;
	}
}
  ce:	08 95       	ret

000000d0 <main>:
int main(void)
{
    /* Replace with your application code */
   uint8_t count=0; // the number of pushing button
   DDRB &= 0xFE; // set pin B0 as input
  d0:	20 98       	cbi	0x04, 0	; 4
   DDRD |= 0xFF; // set pin C0-C4 as output
  d2:	8a b1       	in	r24, 0x0a	; 10
  d4:	8f ef       	ldi	r24, 0xFF	; 255
  d6:	8a b9       	out	0x0a, r24	; 10
	}
}
int main(void)
{
    /* Replace with your application code */
   uint8_t count=0; // the number of pushing button
  d8:	c0 e0       	ldi	r28, 0x00	; 0
   DDRB &= 0xFE; // set pin B0 as input
   DDRD |= 0xFF; // set pin C0-C4 as output
   /* Replace with your application code */
   while (1)
   {
	   PORTD = LED_Display(count);
  da:	8c 2f       	mov	r24, r28
  dc:	0e 94 4a 00 	call	0x94	; 0x94 <LED_Display>
  e0:	8b b9       	out	0x0b, r24	; 11
	   if((PINB & 0x01)==0) count++; // polling pin B0 if it is low level
  e2:	18 9b       	sbis	0x03, 0	; 3
  e4:	cf 5f       	subi	r28, 0xFF	; 255
	   if(count==10) count=0;
  e6:	ca 30       	cpi	r28, 0x0A	; 10
  e8:	09 f4       	brne	.+2      	; 0xec <main+0x1c>
  ea:	c0 e0       	ldi	r28, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ec:	87 ea       	ldi	r24, 0xA7	; 167
  ee:	91 e6       	ldi	r25, 0x61	; 97
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <main+0x20>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <main+0x26>
  f6:	00 00       	nop
  f8:	f0 cf       	rjmp	.-32     	; 0xda <main+0xa>

000000fa <__tablejump2__>:
  fa:	ee 0f       	add	r30, r30
  fc:	ff 1f       	adc	r31, r31
  fe:	05 90       	lpm	r0, Z+
 100:	f4 91       	lpm	r31, Z
 102:	e0 2d       	mov	r30, r0
 104:	09 94       	ijmp

00000106 <_exit>:
 106:	f8 94       	cli

00000108 <__stop_program>:
 108:	ff cf       	rjmp	.-2      	; 0x108 <__stop_program>
